local_costmap:
  plugins:
    - {name: rgbd_obstacle_layer, type: "spatio_temporal_voxel_layer/SpatioTemporalVoxelLayer"}
    - {name: inflation_layer, type: "costmap_2d::InflationLayer"}


  global_frame: map
  robot_base_frame: base_link

  transform_tolerance: 0.5
  # (double, default: 0.2)
  # Specifies the delay in transform (tf) data that is tolerable in seconds. This parameter serves as a safeguard to losing a link in the tf tree while still allowing an amount of latency the user is comfortable with to exist in the system. For example, a transform being 0.2 seconds out-of-date may be tolerable, but a transform being 8 seconds out of date is not. If the tf transform between the coordinate frames specified by the global_frame and robot_base_frame parameters is transform_tolerance seconds older than ros::Time::now(), then the navigation stack will stop the robot. 

  update_frequency: 5.0
  # (double, default: 5.0)
  # The frequency in Hz for the map to be updated. 
  
  publish_frequency: 2.0
  # (double, default: 0.0)
  # The frequency in Hz for the map to be publish display information. 

  rolling_window: true
  # (bool, default: false)
  # Whether or not to use a rolling window version of the costmap. If the static_map parameter is set to true, this parameter must be set to false. 
  static_map: false

  always_send_full_costmap: false
  # (bool, default: false)
  # If true the full costmap is published to "~<name>/costmap" every update. If false only the part of the costmap that has changed is published on the "~<name>/costmap_updates" topic. 

  width: 6.0
  height: 6.0
  resolution: 0.05
  origin_x: -1.5
  origin_y: -1.5
  
  inflation_layer:
    inflation_radius: 0.55
    # (double, default: 0.55)
    # The radius in meters to which the map inflates obstacle cost values. 

    cost_scaling_factor: 2.0
    # (double, default: 10.0)
    # A scaling factor to apply to cost values during inflation. The cost function is computed as follows for all cells in the costmap further than the inscribed radius distance and closer than the inflation radius distance away from an actual obstacle: exp(-1.0 * cost_scaling_factor * (distance_from_obstacle - inscribed_radius)) * (costmap_2d::INSCRIBED_INFLATED_OBSTACLE - 1), where costmap_2d::INSCRIBED_INFLATED_OBSTACLE is currently 254. NOTE: since the cost_scaling_factor is multiplied by a negative in the formula, increasing the factor will decrease the resulting cost values. 
  
  rgbd_obstacle_layer:
    enabled:                  true
    voxel_decay:              15    # seconds if linear, e^n if exponential
    decay_model:              0     # 0=linear, 1=exponential, -1=persistent
    voxel_size:               0.05  # meters
    track_unknown_space:      true  # default space is unknown
    observation_persistence:  0.0   # seconds
    max_obstacle_height:      2.0   # meters
    unknown_threshold:        15    # voxel height
    mark_threshold:           0     # voxel height
    update_footprint_enabled: true
    combination_method:       1     # 1=max, 0=override
    obstacle_range:           3.0   # meters
    origin_z:                 0.0   # meters
    publish_voxel_map:        true  # default off
    transform_tolerance:      0.2   # seconds
    mapping_mode:             false # default off, saves map not for navigation
    map_save_duration:        60    # default 60s, how often to autosave
    observation_sources:      rgbd1_mark rgbd1_clear
    rgbd1_mark:
      data_type: PointCloud2
      topic: camera/depth_registered/points
      marking: true
      clearing: false
      min_obstacle_height: -0.1    # default 0, meters
      max_obstacle_height: 2.0     # default 3, meters
      expected_update_rate: 0.0    # default 0, if not updating at this rate at least, remove from buffer
      observation_persistence: 0.0 # default 0, use all measurements taken during now-value, 0=latest
      inf_is_valid: false          # default false, for laser scans
      clear_after_reading: true    # default false, clear the buffer after the layer gets readings from it
      voxel_filter: true           # default off, apply voxel filter to sensor, recommend on 
      voxel_min_points: 20          # default 0, minimum points per voxel for voxel filter, even with that hight number phantoms sometimes happen
    rgbd1_clear:
      enabled: true                #default true, can be toggled on/off with associated service call
      data_type: PointCloud2
      topic: camera/depth_registered/points
      marking: false
      clearing: true
      max_z: 7.0                     # default 10, meters
      min_z: 0.1                     # default 0, meters
      vertical_fov_angle: 0.7958701  # default 0.7, radians
      horizontal_fov_angle: 1.021018 # default 1.04, radians
      decay_acceleration: 5.0        # default 0, 1/s^2. If laser scanner MUST be 0
      model_type: 0                  # default 0 (depth camera). Use 1 for 3D Lidar

# Kinect FOV
# Horizontal FOV: 58,5 = 1.021018
# Vertical FOV: 45,6 = 0.7958701
