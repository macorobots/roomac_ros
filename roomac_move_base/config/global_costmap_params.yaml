global_costmap:
  plugins:
    - {name: static_map,       type: "costmap_2d::StaticLayer"}
    - {name: inflation_layer, type: "costmap_2d::InflationLayer"}

  global_frame: map
  robot_base_frame: base_link

  transform_tolerance: 0.5
  # (double, default: 0.2)
  # Specifies the delay in transform (tf) data that is tolerable in seconds. This parameter serves as a safeguard to losing a link in the tf tree while still allowing an amount of latency the user is comfortable with to exist in the system. For example, a transform being 0.2 seconds out-of-date may be tolerable, but a transform being 8 seconds out of date is not. If the tf transform between the coordinate frames specified by the global_frame and robot_base_frame parameters is transform_tolerance seconds older than ros::Time::now(), then the navigation stack will stop the robot. 

  update_frequency: 2.5
  # (double, default: 5.0)
  # The frequency in Hz for the map to be updated. 
  
  publish_frequency: 0.0
  # (double, default: 0.0)
  # The frequency in Hz for the map to be publish display information. 

  rolling_window: false
  # (bool, default: false)
  # Whether or not to use a rolling window version of the costmap. If the static_map parameter is set to true, this parameter must be set to false.
  static_map: true

  
  always_send_full_costmap: false
  # (bool, default: false)
  # If true the full costmap is published to "~<name>/costmap" every update. If false only the part of the costmap that has changed is published on the "~<name>/costmap_updates" topic. 

  # width: 3.0
  # height: 3.0
  # resolution: 0.05
  origin_x: 0.0
  origin_y: 0.0
  

  inflation_layer:
    inflation_radius: 0.55
    # (double, default: 0.55)
    # The radius in meters to which the map inflates obstacle cost values. 

    cost_scaling_factor: 2.0
    # (double, default: 10.0)
    # A scaling factor to apply to cost values during inflation. The cost function is computed as follows for all cells in the costmap further than the inscribed radius distance and closer than the inflation radius distance away from an actual obstacle: exp(-1.0 * cost_scaling_factor * (distance_from_obstacle - inscribed_radius)) * (costmap_2d::INSCRIBED_INFLATED_OBSTACLE - 1), where costmap_2d::INSCRIBED_INFLATED_OBSTACLE is currently 254. NOTE: since the cost_scaling_factor is multiplied by a negative in the formula, increasing the factor will decrease the resulting cost values. 
  
  static_map:
    unknown_cost_value: -1
    # (int, default: -1)
    # The value for which a cost should be considered unknown when reading in a map from the map server. If the costmap is not tracking unknown space, costs of this value will be considered occupied. A value of zero also results in this parameter being unused. 

    lethal_cost_threshold: 100
    # (int, default: 100)
    # The threshold value at which to consider a cost lethal when reading in a map from the map server. 

    map_topic: map
    # (string, default: "map")
    # The topic that the costmap subscribes to for the static map. This parameter is useful when you have multiple costmap instances within a single node that you want to use different static maps.

    first_map_only: false
    # (bool, default: false)
    # Only subscribe to the first message on the map topic, ignoring all subsequent messages 

    subscribe_to_updates: false
    # (bool, default: false)
    # In addition to map_topic, also subscribe to map_topic + "_updates" 

    track_unknown_space: true
    # (bool, default: true)
    # If true, unknown values in the map messages are translated directly to the layer. Otherwise, unknown values in the map message are translated as FREE_SPACE in the layer. 

    use_maximum : false
    # (bool, default: false)
    # Only matters if the static layer is not the bottom layer. If true, only the maximum value will be written to the master costmap. 

    trinary_costmap: true
    # (bool, default: true)
    # If true, translates all map message values to NO_INFORMATION/FREE_SPACE/LETHAL_OBSTACLE (three values). If false, a full spectrum of intermediate values is possible. 

  